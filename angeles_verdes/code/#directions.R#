## librerías utilizadas
library(rjson)
library(RJSONIO)
library(RCurl)
library(plyr)
library(stringr)
library(data.table)
library(caret)
library(dplyr)
library(lubridate)
library(geosphere)
## Funciones
##-------------------------------------
## get_directions
##-------------------------------------
## Calcula direcciones entre dos puntos
## esto está útil para graficarlos recorridos una vez que los tengamos ;)
get_directions <- function(origen, destino, mode = "driving"){
    base        <- "https://maps.googleapis.com/maps/api/directions/json?"
    origen      <- paste0("origin=",origen)
    destino     <- paste0("destination=",destino)
    mode        <- paste0("mode=",mode)
    key         <- "key=AIzaSyAkW2m1J6oq_UblEtwhzVB9EYmz7Ayc4k0"
    query       <- paste(base,origen,destino,mode,key,sep = "&")
    route       <- fromJSON(getURL(query))$routes[[1]]$legs
    steps       <- route[[1]]$steps
    list(
        "durations"  = ldply(steps,function(t)t <- t$duration$text)[,1],
        "distance"   = ldply(steps,function(t)t <- t$distance$text)[,1],
        "start_loc"  = ldply(steps,function(t)t <- t$start_location),
        "end_loc"    = ldply(steps,function(t)t <- t$end_location)
        )
}
##-------------------------------------
## get_distance
##-------------------------------------
## Calcula distancia entre dos puntos
## falta hacer para distancia entre n puntos
get_distance <- function(origen, destino){
    base        <- "https://maps.googleapis.com/maps/api/distancematrix/json?"
    origen      <- paste0("origins=",origen)
    destino     <- paste0("destinations=",destino)
    key         <- "key=AIzaSyAkW2m1J6oq_UblEtwhzVB9EYmz7Ayc4k0"
    query       <- paste(base,origen,destino,key,sep = "&")
    results     <- fromJSON(getURL(query))
    distance    <- results$rows[[1]]$elements[[1]]$distance$text
    duration    <- results$rows[[1]]$elements[[1]]$duration$text
    list("distance"=distance,"duration"=duration)
}
##-------------------------------------
## near_accident_id
##-------------------------------------
## Determina los k puntos que se encuentran
## más cerca de un accidente dado un intervalo
## de tiempo.
near_accident_id<- function(accidente, recorridos, intervalo=2.1e4){
    ## Esto me da a los recorridos que estan en una vecindad
    ## de tamaño intervalo del accidente.
    recorridos <-
        recorridos[recorridos$tiempo <= accidente$fecha + intervalo &
                       recorridos$tiempo >= accidente$fecha - intervalo, ]
    ## Es necesario obtener la distancia carretera entre el accidente y los
    ## recorridos 
    coords_accidente <- accidente[,c(10,11)]
    coords_recorrido <- recorridos[,c(3,4)]
    ## para esto usamos la distancia geodésica.
    distancia_geo  <-
        apply(coords_recorrido[,c(2,1)],1,function(t)t <-
            distCosine(t, coords_accidente[,c(2,1)])/1e3)
    ## Obtenemos los más cercanos
    recorridos$distancia_geo <- distancia_geo
    recorridos <- data.table(recorridos)
    dist_accident_id <- recorridos[,min(distancia_geo), by = patrulla]
    setNames(dist_accident_id,
             c("patrulla","dist"))
}
##-------------------------------------
## near_accident
##-------------------------------------
## Determina los k puntos que se encuentran
## más cerca de un accidente dado un intervalo
## de tiempo.
near_accident <- function(accidente,
                          recorridos,
                          intervalo = 2.1e4,
                          k = 1){
    ## Esto me da a los recorridos que estan en una vecindad
    ## de tamaño intervalo del accidente.
    recorridos <-
        recorridos[recorridos$tiempo <= accidente$fecha + intervalo &
                       recorridos$tiempo >= accidente$fecha - intervalo, ]
    ## Es necesario obtener la distancia carretera entre el accidente y los
    ## recorridos
    if(nrow(recorridos)>0){
        coords_accidente <- accidente[,c(10,11)]
    coords_recorrido <- recorridos[,c(3,4)]
    ## para esto usamos la distancia geodésica.
    distancia_geo  <-
        apply(coords_recorrido[,c(2,1)],1,function(t)t <-
            distCosine(t, coords_accidente[,c(2,1)])/1e3)
    ## Obtenemos los más cercanos
    recorridos$distancia_geo <- distancia_geo
    k_vecinos <- head(recorridos[order(distancia_geo),], k)
    ## continuamos con la distancia carretera
    distancia_carr <-
        apply(k_vecinos[,c(3,4)],
              1,
              function(t)t <-{
                  get_distance(
                      paste(as.character(t),
                            collapse = ","),
                      paste(
                          as.character(coords_accidente),
                          collapse = ",")
                      )$distance
              }
              )
    k_vecinos$distancia_carr <- distancia_carr
        
    }else{
        k_vecinos <-
            paste0("no hubo patrullas cerca del accidente en el intervalo de tiempo: +-",
                   intervalo/3600, " horas")
    }
    k_vecinos
}
##-------------------------------------
## k_near_accident_id
##-------------------------------------
## Determina los k  puntos que se encuentran
## más cerca de cada uno de los puntos por id
## de tiempo.
k_near_accident_id <- function(accidentes,
                               recorridos,
                               intervalo = 2.1e4){
    dlply(accidentes,1,
          function(t)t <-
              near_accident_id(t,
                               recorridos,
                               intervalo
                               )
          ) 
}
##-------------------------------------
## k_near_accident
##-------------------------------------
## Determina los k  puntos que se encuentran
## más cerca de cada uno de los accidentes dado un intervaloo
## de tiempo.
k_near_accident <- function(accidentes,
                            recorridos,
                            intervalo = 2.1e4,
                            k = 1){
    dlply(accidentes,1,
          function(t)t <-
              near_accident(t,
                            recorridos,
                            intervalo,
                            k)) 
}
##################################################################
##################################################################
##############################PRUEBAS#############################
##################################################################
##################################################################

####################### lectura de datos #########################
## Leer datos referentes a recorridos de patrullas y accidentes
##################################################################
## Recorridos
recorridos <- read.csv("../../angeles_verdes/data/recorridos.csv",
                       stringsAsFactors = FALSE)
recorridos$tiempo <- as.POSIXct(recorridos$tiempo)
                                        
#### Accidentes
accidentes <- read.csv("../../angeles_verdes/data/base_hora_clean.csv",
                       stringsAsFactors = FALSE)
accidentes$fecha <- as.POSIXct(accidentes$fecha)
in_time_acc <- accidentes[accidentes$fecha <= max(recorridos$tiempo) &
                              accidentes$fecha >= min(recorridos$tiempo),]
in_time_acc <- filter(in_time_acc, servicio == "Accidente")
#### Prueba distancia más corta
k_vecinos_accidentes <- k_near_accident(in_time_acc, recorridos)

#### Prueba distancia más corta para diferentes lapsos de tiempo.
## Esto captura mucho más las dinámicas y da más información
## para tomar mejores decisiones.
## 1 hora, 5 horas, 1 día, 5 días
intervalo <- c(3600, 18e3, 86.4e3, 43.2e4, 86.4e4)
results <- list()
for(i in 1:length(intervalo)){
    results[[i]] <- k_near_accident(in_time_acc,
                                    recorridos,
                                    intervalo = intervalo[i])
}

first_iter <- results[[1]]

first_iter_csv <- ldply(first_iter,function(t)t <- t)

first_iter_csv$fecha_accidente <- in_time_acc$fecha
first_iter_csv$lon_accidente   <- in_time_acc$longitud_geo
first_iter_csv$lat_accidente   <- in_time_acc$latitud_geo
first_iter_csv$num_afectados   <- in_time_acc$turistasat
