## Funciones para llevar a cabo tareas básicas de manipulación
## con los datos de las carreteras.
## Librerías utilizadas
library(plyr)
library(foreign)
library(sp)
library(rgdal)
library(maptools)
library(lubridate)
library(shapefiles)
library(proj4)
library(geosphere)
library(mapproj)
library(FNN)
library(ggmap)
library(RecordLinkage)
library(tidyr)
library(caret)
library(RPostgreSQL)
library(data.table)
library(googleVis)
library(rCharts)
## Lectura de shapefile
## shp <- readOGR("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/CSTAV_Cobertura_Carretera-0/CSTAV_Cobertura_Carretera/","Cobertura_Carretera_CSTAV_2014")
### Obtención de coordenadas
## el shape tiene 245 rutas.
## las lineas que definen cada tramo de la
## carretara están dentro de lines
## las coordenadas de cada linea estan en Lines@coords
#########
## ejemplo:
## Número de carreteras
## nrow(shp)
## Número de lineas que constituyen la carretera 2
## length(shp[2,1]@lines[[1]]@Lines)
## coordenadas de la primera línea de la carretera 2
## shp[2,1]@lines[[1]]@Lines[[1]]@coords
## datos de la proyección
## CRS arguments:
##    +proj=lcc +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102 +x_0=2500000
## +y_0=0 +ellps=GRS80 +units=m +no_defs
##coords.tot <- list()
##carretera  <- list()
##########
##for(i in 1:nrow(shp)){
##    ## Obtenemos total de lineas que constituyen
##    ## la carretera.
##    lines  <- length(shp[i,1]@lines[[1]]@Lines)
##    coords <- list()
##    print(paste0("carretera: ",i))
##    for(j in 1:lines){
##        coords[[j]]    <- shp[i,1]@lines[[1]]@Lines[[j]]@coords
##        print(paste0("línea: ",j))
##    }
##    coords.tot[[i]] <- ldply(coords,function(t)t<-t)
##    carretera[[i]]  <- rep(as.character(shp[i,1]@data$NOMVIAL[1]),
##                           nrow(coords.tot[[i]]))
##}
##coords.tot <- ldply(coords.tot, function(t)t<-t)
##carretera  <- unlist(carretera)
##coords.tot$carretera <- carretera
##names(coords.tot) <-c("lon","lat","carretera")
#### transformar cordenadas
##coords <- project(coords.tot[,1:2], proj= c("+proj=lcc", "+lat_1=17.5", "+lat_2=29.5", "+lat_0=12", "+lon_0=-102", "+x_0=2500000", "+y_0=0", "+ellps=GRS80" ,"+units=m", "+no_defs"), inverse = TRUE)
##coords.tot$lon <- unlist(coords[[1]])
##coords.tot$lat <- unlist(coords[[2]])
## Guardar datos
##write.csv(coords.tot, "/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/road_coords.csv", row.names = FALSE)
##########################################################################
#################################Funciones################################
##########################################################################
## Lectura de datos
## Datos oficiales accidentes
## Esto es para llevar a cabo el análisis anterior con
## el total de los datos. Más adelante, nos limitaremos a la tempor
## alidad de los accidentes. Hay q separar también los datos con
## los que contamos con fecha
accidentes_tot<- read.csv("../../../angeles_verdes/data/angels_clean.csv",
                          stringsAsFactors = FALSE)
## date <- as.Date(accidentes_tot$FechaServi)
## date <- as.POSIXct(date)
## Datos recorridos
recorridos <- read.csv("../../../angeles_verdes/data/recorridos.csv",
                       stringsAsFactors = FALSE)
recorridos$tiempo <- as.POSIXct(recorridos$tiempo)
## Datos de las carreteras
coords <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/road_coords.csv", stringsAsFactors = FALSE)
## Datos de tráfico
aforo <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/aforo.csv", stringsAsFactors = FALSE)
## Datos de accidentes 
accident <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/base_hora_clean.csv", stringsAsFactors = FALSE)
## Datos limpios y agregados carreteras
tij_ens <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/tij_ens.csv", stringsAsFactors = FALSE)
accident$fecha <- as.POSIXct(accident$fecha)
accident <- accident[accident$fecha <= max(recorridos$tiempo) &
                         accident$fecha >= min(recorridos$tiempo),]
## Datos limipios de accidente con hora
acc_time <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/general_analysis/accidents_time.csv", stringsAsFactors = FALSE)
## Tijuana Ensenada (punto 4)
##tij_ens <- dplyr::filter(coords, carretera == "Ensenada-Tijuana")
##----------------------------
## asigna_camino (punto 1)
##----------------------------
## dado un punto, le asigna la carretera
## a la cual pertenece (la más cercana)
## p= punto en formato longitud, latitud
asigna_camino <- function(p){
    d_lon <- abs(coords$lon - as.numeric(p[1]))
    d_lat <- abs(coords$lat - as.numeric(p[2]))
    dist  <- data.frame(lon=d_lon,lat=d_lat)
    dist  <- apply(dist,1,max)
    near  <- head(coords[order(dist),],3)
    dist  <- apply(near[,1:2], 1,function(t)t <-
        distCosine(as.numeric(t),as.numeric(p)))
    data.frame(carretera = near[,3],
               dist = dist/1000,
               nearest_lon = near[,1],
               nearest_lat = near[,2])
}
##----------------------------
## curvatura (punto 2)
##----------------------------
## dado un punto, le asigna la carretera
## a la cual pertenece (la más cercana)
## p= punto en formato longitud, latitud
## θ = atan2(sin(Δlong)*cos(lat2), cos(lat1)*sin(lat2) − sin(lat1)*cos(lat2)*cos(Δlong)
curvatura <- function(p){
    road     <- asigna_camino(p)
    delt_lon <- road$nearest_lon[1] - road$nearest_lon[3]
    angle    <- atan2(sin(delt_lon)*cos(road$nearest_lat[3]),
                      cos(road$nearest_lat[1])*sin(road$nearest_lat[3])-
                          sin(road$nearest_lat[1])*cos(road$nearest_lat[3])*
                              cos(delt_lon)
                      )
    angle
}
##----------------------------
## Identificar intersecciones
##----------------------------
## dado un punto, le asigna la carretera
## a la cual pertenece (la más cercana)
## p= punto en formato longitud, latitud
intersect <- function(coords){
    key <- paste0(coords[,1],coords[,2])
    duplicated(key)
}
## determinemos que puntos de
## la carretera tij_en son intersecciones
## inter <- intersect(tij_ens[,1:2])
## inter <- intersect(coords)
##----------------------------
## asignar accidentes (punto 3)
##----------------------------
asign_acc <- function(tij_ens_coords, accident_coord, TOL = 300){
    near <- apply(tij_ens_coords,1, function(t)t <- distCosine(t, accident_coord))
    sum(near < TOL)
}

asign_acc_n <- function(tij_ens_coords, accidents_coords, TOL = 300){
    apply(accidents_coords, 1, function(t)t <- asign_acc(tij_ens_coords, t, TOL))
}
## asignar accidentes con hora
## n_acc     <- asign_acc_n(accident[,11:10], tij_ens[,1:2])
## tij_ens$acc_cerca <- n_acc
## asignar accidentes oficiales
test_1 <- test_1[,2:1]
test_2 <- test_2[,2:1]
n_acc     <- asign_acc_n(test_2, test_1)
tij_ens$acc_cerca <- n_acc
####----------------------------
#### asignar circulación (tij_ens, accidente)
####----------------------------
#### Correr k-nearest neighbors
#### Tij-Ens
##set.seed(123454321)
##train <- aforo[,1:2]
##test  <- tij_ens[,2:1]
##y     <- aforo[,3]
##names(test) <- c("latitude","longitude")
##knn_tij <- knn.reg(train = train,test = test,y = y,"cover_tree", k = 3)
##tij_ens$circ_diaria <- knn_tij$pred
#### Accidentes
##acc_in_zone <- dplyr::filter(naccidentes_tot, Nom_Ent == "Baja California")

train <- aforo[,1:2]
test  <- acc_time[,5:4]
names(test) <- c("latitude","longitude")
test$longitude <- extract_numeric(test$longitude)
test$latitude <- extract_numeric(test$latitude)
y     <- aforo[,3]
knn_acc <- knn.reg(train = train, test = test,y = y,"cover_tree", k = 3)
##acc_in_zone$circ_diaria <- knn_acc$pred
####---------------------------
## pruebas
##---------------------------
## Estudio de Outliers
##outliers <- dplyr::filter(tij_ens, prop_acc > .003)
##road.map      <- get_map(location = "Mexico", zoom = 5, maptype = "roadmap")
##road.map.plot <- ggmap(road.map)
##road.map.plot + geom_point(data = outliers, aes(x = lon, y = lat),
##                           col = "#6200EA" ) +
##theme(axis.text = element_text(colour = "#6200EA"), axis.title.y = element_blank(), axis.title.x = element_blank(),
##      title = element_text(size = 15, colour = "#6200EA", vjust = 0.7 ),
##      panel.background = element_blank())
##----------------------------
## Prueba con datos oficiales
##----------------------------
##coords_acc_in_zone <- acc_in_zone[,22:23]
##curvature_acc <- apply(coords_acc_in_zone,1,curvatura)
##acc_in_zone$curv <- curvature_acc
####----------------------------
## encontrar intersecciones en carreteras.
###----------------------------
##  key <- paste0(coords[,1],coords[,2])
##coords$inter <- duplicated(key)
##road.map.plot + geom_point(data = coords, aes(x = lon, y = lat, col = inter)) 
##----------------------------------------------------
##----------------------------------------------------
##----------------------------------------------------
## A partir de esta sección se realiza análisis general
## para las carreteras con las que se cuenta con información.
## las consultas a las bases de datos se harán via PostgreSQL
##drv <- dbDriver("PostgreSQL")
## creando connexión
##con <- dbConnect(drv, dbname="angeles_verdes", user="lgarcia")
## Tramos
## TE_PV, TI_EN, TE_MA, IR_LE, ME_QE
##tramo <- "TE_PV"
##query <- paste0("SELECT * FROM all_data WHERE tramo like '",
##tramo,
##"'")
##db    <- dbGetQuery(con, query)
##----------------- Asignar caminos a accidentes
## Lectura de datos
acc <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/general_analysis/accidents.csv", stringsAsFactors = FALSE)
acc_coords <- acc[,c(5,4)]
tramo <- apply(acc_coords, 1, function(t) t <- asigna_camino(t)[1,1])
## Estructuración
## ac_clean
## obtener columnas relevantes
ac_clean <- accident[,c(1,3,7,11,10,14)]
## obtener intersecciones
ac_clean$inter <- intersect(ac_clean[,4:5])
## obtener curvatura
curv <- apply(acc_coords, 1, function(t) t <- curvatura(t) )
ac_clean$curv <- curv
## obtener tránsito
train  <- aforo[,1:2]
## coords
test_1 <- coords[,2:1]
names(test) <- c("latitude","longitude")
test_1$longitude <- extract_numeric(test_1$longitude)
test_1$latitude  <- extract_numeric(test_1$latitude)
y     <- aforo[,3]
knn_acc       <- knn.reg(train = train, test = test,y = y,"cover_tree", k = 2)
coords$circ_diaria <- knn_acc$pred
## accidentes
test_2 <- ac_clean[,5:4]
names(test_2) <- c("latitude","longitude")
test_2$longitude <- extract_numeric(test_2$longitude)
test_2$latitude  <- extract_numeric(test_2$latitude)
y     <- aforo[,3]
knn_acc       <- knn.reg(train = train, test = test,y = y,"cover_tree", k = 2)
ac_clean$circ_diaria <- knn_acc$pred
## Mapas
accidentes <- ggplot(data = test,
                     aes(x = longitude,
                         y = latitude)) + geom_point()+
                             ggtitle("Accidentes")+
                                 theme(axis.text =
                                           element_text(colour = "#6200EA"),
                                       axis.text.y = element_text(size = 3.5),
                                       axis.title.y =
                                           element_blank(),
                                       axis.title.x =
                                           element_blank(),
                                       title =
                                           element_text(size = 15, colour = "#6200EA", vjust = 0.7 ),
                                       panel.background =
                                           element_blank())

circ_prom <- ggplot(data = aforo,
                    aes(x = longitude,
                        y = latitude,
                        col = number)) + geom_point(alpha = .5) +
                            ggtitle("Circulación promedio diaria")+
                                theme(axis.text =
                                          element_text(colour = "#6200EA"),
                                      axis.text.y = element_text(size = 3.5),
                                      axis.title.y =
                                          element_blank(),
                                      axis.title.x =
                                          element_blank(),
                                      title =
                                          element_text(size = 15, colour = "#6200EA", vjust = 0.7 ),
                                      panel.background =
                                          element_blank()) +
                                    scale_colour_gradient("Circulación  \n promedio diaria",
                                                          low="#6200EA")

accidentes_circ <- ggplot(data = test,
                          aes(x = longitude,
                              y = latitude,
                              col = knn_acc$pred)) + geom_point()+
                                  ggtitle("Accidentes ponderados con circulación \n promedio diaria")+
                                      theme(axis.text =
                                                element_text(colour = "#6200EA"),
                                            axis.text.y = element_text(size = 3.5),
                                            axis.title.y =
                                                element_blank(),
                                            axis.title.x =
                                                element_blank(),
                                            title =
                                                element_text(size = 15, colour = "#6200EA", vjust = 0.7 ),
                                            panel.background =
                                                element_blank()) +
                                          scale_colour_gradient("Circulación  \n promedio diaria",
                                                                low="#6200EA")
multiplot(accidentes, circ_prom ,accidentes_circ, cols = 1)

###
#####
### Curvatura a toda la carretera
#####
set.seed(123454321)
trainIndex <- createDataPartition(coords$carretera, p = .01,
                                  list = FALSE,
                                  times = 5)
## Aquí hacer un loop
coords_samp <- coords[trainIndex[,1],][,1:2]
curv_coords <- apply(coords_samp,1,function(t)t <- curvatura(t))
roads <- coords[trainIndex[,1],3]
roads <- data.table(road = roads,
                    curv = curv_coords) 
curv_roads <- roads[,abs(mean(curv)), by=road.road]
                                        #write.csv(curv_roads, "/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/general_analysis/curv_roads.csv", row.names=FALSE)
###----------------------------------------------------------
###----------------------------------------------------------
###-------------------------------------------Visualizaciones
###----------------------------------------------------------
###----------------------------------------------------------
## Curvatura
curv_data <- read.csv("/home/lgarcia/proyectos/presidencia/data_analysis/angeles_verdes/data/data_entregable/road_curv.csv",stringsAsFactors = FALSE)
ggplot(data = curv_data,
       aes(x = lon,
           y = lat,
           col = curv)) + geom_point()
## Curvatura GoogleVis
curv_data$loc <- paste(curv_data$lat, curv_data$lon, sep=":")
set.seed(123454321)
samp <- sample(nrow(curv_data),400)
curv_data_samp <- curv_data[samp,]
G <- gvisGeoChart(curv_data_samp, locationvar = "loc",
                  colorvar = "curv",
                  sizevar = "curv",
                  options=list(
                      region="MX",
                      displayMode="Markers", 
                      colorAxis="{colors:['#6200EA', 'red', '#00CC99', '#757575']}",
                      backgroundColor="lightblue"), chartid="curv")
plot(G)
## Zoom curvy
mapcurv <- Leaflet$new()
mapcurv$setView(extract_numeric(as.character(curvy[1,3:4])),
                zoom = 14)
mapcurv$marker(extract_numeric(as.character(curvy[1,3:4])),
               bindPopup = paste0("<p> Curvatura: ",curvy[1,1],"</p>"))
mapcurv
mapcurv$save('curvy_zoom.html',cdn=TRUE)
## circulación
set.seed(123454321)
aforo$loc <- paste(aforo$latitude, aforo$longitude, sep=":")
samp <- sample(nrow(aforo), 400)
aforo_samp <- aforo[samp,]
circ <-  gvisGeoChart(aforo_samp, locationvar="loc", 
                      colorvar="number",
                      sizevar = NULL,
                      options=list(
                          colorAxis="{colors:['#6200EA', 'red', '#00CC99', '#757575']}",
                          region="MX",
                          backgroundColor="lightblue"),chartid="circ")
plot(circ)
## Análisis exploratorio datos de accidentes.
##set.seed(123454321)
##sample <- sample(nrow(acc_time),100)
##data_plot <- acc_time[sample,]
date      <- as.Date(acc_time$fecha)
date_acc  <- count(date)
data_plot <- data.table(acc_time)
data_plot$fecha <- as.Date(acc_time$fecha)
## Preparar datos D3.js
data_plot$dia  <- weekdays(data_plot$fecha)
data_d3  <- data_plot[, .N, by = "dia,tramo,inter"]
data_d3  <- data_d3[order(data_d3$dia),]
## Calendarios
cal_plot <- gvisCalendar(date_acc, datevar = "x",
                         numvar = "freq",
                         options=list(colors="['#D1C4E9', '#5E35B1', '#6200EA']",
                             width="1000px", height="200px"))
plot(cal_plot)

## Serie de tiempo
series_data <- data_plot[,list(circ = mean(circ), curv = max(curv), acc = log(.N), turis = log(mean(turistasat))), by = "fecha,tramo"]
chart <- gvisMotionChart(series_data, "tramo", "fecha",
                         options = list(width = 500, height = 350,
                             colorAxis="{colors: ['lightblue', '#6200EA']}"))

## gráfico intersección
inter_data <- data_plot[, log(.N), by="servicio,tramo,inter"]
prop_inter <- sum(inter_data$inter)/nrow(inter_data)
inter_data$V1[inter_data$inter == TRUE] <- inter_data$V1[inter_data$inter == TRUE]/prop_inter
inter_data$V1[inter_data$inter == FALSE] <- inter_data$V1[inter_data$inter == FALSE]/(1-prop_inter)

n1 <- nPlot(V1 ~ servicio, group = "inter", data = inter_data, 
            type = 'multiBarChart')
n1$save('hist_inter_service.html',cdn=TRUE)
## Cruce de variables
bubble_data <- data_plot[,list(curva = mean(curv), acc = log(.N), turis = mean(turistasat)),by=tramo]
bubble4 <- gvisBubbleChart(bubble_data,
                           idvar="tramo",
                           xvar="curva",
                           yvar="acc",
                           sizevar="turis",
                           options=list(
                               vAxes="[{viewWindowMode:'explicit',viewWindow:{min:-2, max:10}}]",
                               hAxes="[{viewWindowMode:'explicit',viewWindow:{min:-1, max:4}}]",
                               width="650px", height="450px",
                               colorAxis="{colors: ['lightblue', '#6200EA']}"))
plot(bubble4)

## Gráfficas por hora.
